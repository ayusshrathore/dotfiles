# Extract a file
extr () {
    if [ -f "$1" ]; then
        case "$1" in
            *.tar.bz2|*.tbz2)   tar xjf         "$1";;
            *.tar.gz|*.tgz)     tar xzf         "$1";;
            *.tar.zst)          tar -I zstd xf  "$1";;
            *.tar.xz)           tar xf          "$1";;
            *.tar)              tar xf          "$1";;
            *.gz)               gunzip          "$1";;
            *.xz)               unxz            "$1";;
            *.rar)              unrar x         "$1";;
            *.zip)              unzip           "$1";;
            *.7z)               7z x            "$1";;
            *.Z)                uncompress      "$1";;
            *.bz2)              bunzip2         "$1";;
            *.lzma)             unlzma          "$1";;
            *)                  echo "'$1' cannot be extracted via extr()"; return 1;;
        esac
    else
        echo "'$1' is not a valid file"
        return 2
    fi
}

# Make dir & cd
mcd() {
    mkdir -p "$1" && cd "$1"
}


### FZF Functions ###
# default fzf options
export FZF_DEFAULT_OPTS="${FZF_DEFAULT_OPTS} -0 --height '45%' --reverse"

alias clipbd="wl-copy"
alias devar="unset var"

# mf [micro fuzzy]: open a file in $EDITOR
mf() {
    var="$(fd -d5 -tf --follow --hidden --search-path ~ 2>/dev/null | fzf --prompt "micro ")"
    [ -n "$var" ] && "$EDITOR" "$var"
    devar; return 0
}

# feh [feh fuzzy]: open a file in feh
fehf() {
    var="$(fd -d5 -tf --follow --hidden --search-path ~ 2>/dev/null | fzf --prompt "feh ")"
    [ -n "$var" ] && feh --scale-down --auto-zoom "$var"
    devar; return 0
}

# cof [code fuzzy]: open a file in VS Code
cof() {
    var="$(fd -d5 -tf --follow --hidden --search-path ~ 2>/dev/null | fzf --prompt "code ")"
    [ -n "$var" ] && code "$var"
    devar; return 0
}

# cf [cd fuzzy]: cd from $HOME
cf() {
    if command -v fd >/dev/null; then
        var="$(fd -d5 -td --follow --search-path ~ 2>/dev/null | fzf --prompt "cd ")"
    else
        var="$(find -L "$HOME" -maxdepth 5 -type d -not -path '*/\.*' 2>/dev/null | fzf --prompt "cd ")"
    fi
    [ -n "$var" ] && cd "$var" 2>/dev/null
    devar; return 0
}

# ch [cd hidden/here]: cd from current dir including hidden
ch() {
    if command -v fd >/dev/null; then
        var="$(fd -d5 -td --follow --hidden --exclude '\.git*' 2>/dev/null | fzf --prompt "cd ")"
    else
        var="$(find -L . -maxdepth 5 -type d -not -path '*/\.git*' 2>/dev/null | fzf --prompt "cd ")"
    fi
    [ -n "$var" ] && cd "$var" 2>/dev/null
    devar; return 0
}

# hst [history]: search command line history & copy selected
hst() {
    var="$(history | cut -c8- | fzf --multi --tac --prompt "history ")"
    [ -n "$var" ] && echo "$var" | clipbd
    devar; return 0
}

# btw, i use arch
if [ -f "/etc/arch-release" ]; then
# pacls [pacman list]: list all installed packages
pacls() {
    var="$(pacman -Qq | fzf --height "100%" --multi --preview "pacman -Qi {1}" --preview-window "right:70%" --prompt "pkg ")"
    [ -n "$var" ] && echo "$var" | clipbd
    devar; return 0
}

# pacfd [pacman find]: find a package
pacfd() {
    var="$(pacman -Slq | fzf --height "100%" --multi --preview "pacman -Si {1}" --preview-window "right:70%" --prompt "pkg ")"
    [ -n "$var" ] && echo "$var" | clipbd
    devar; return 0
}

# yayls [yay list]: list all installed AUR packages
yayls() {
    var="$(yay -Qmq | fzf --height "100%" --multi --preview "yay -Qi {1}" --preview-window "right:70%" --prompt "pkg ")"
    [ -n "$var" ] && echo "$var" | clipbd
    devar; return 0
}

# yayfd [yay find]: find an AUR package
yayfd() {
    var="$(yay -Slaq | fzf --height "100%" --multi --preview "yay -Si {1}" --preview-window "right:70%" --prompt "pkg ")"
    [ -n "$var" ] && echo "$var" | clipbd
    devar; return 0
}
fi

# gifs [git fuzzy show]: git commit browser
gifs() {
    # https://gist.github.com/junegunn/f4fca918e937e6bf5bad
    [ -z "$(git rev-parse --git-dir 2>/dev/null)" ] && return 0

    commit_hash="echo {} | grep -o '[a-f0-9]\{7\}' | head -1"
    commit_copy="$commit_hash | xclip -r -selection clipboard"
    commit_cout="$commit_hash | xargs -I % sh -c 'git checkout %'"
    commit_view="$commit_hash | xargs -I % sh -c 'git show --color=always % | less -R'"
    commit_word="$commit_hash | xargs -I % sh -c 'git show --color=always --color-words % | less -R'"

    git log --graph --color=always --format="%C(auto)%h%d %s %C(bold black)%cN, %cr" | \
    fzf --ansi --no-sort --reverse --height "100%" --tiebreak "index" \
    --preview "$commit_view" \
    --preview-window "down:65%" \
    --bind "tab:execute:$commit_word" \
    --bind "ctrl-m:execute:$commit_view" \
    --bind "ctrl-h:execute:$commit_cout" \
    --bind "C:execute-silent:$commit_copy" \
    --header "[ctrl-c]: yank hash [ctrl-q]: quit [ctrl-h]: checkout [tab]: show --color-words [enter]: show"

    unset commit_hash commit_copy commit_cout commit_view commit_word
    return 0
}

#fuzzy wifi
wifi() {
	has() {
	  local verbose=false
	  if [[ $1 == '-v' ]]; then
	    verbose=true
	    shift
	  fi
	  for c in "$@"; do c="${c%% *}"
	    if ! command -v "$c" &> /dev/null; then
	      [[ "$verbose" == true ]] && err "$c not found"
	      return 1
	    fi
	  done
	}
	
	err() {
	  printf '\e[31m%s\e[0m\n' "$*" >&2
	}
	
	die() {
	  (( $# > 0 )) && err "$*"
	  exit 1
	}
	
	has -v nmcli fzf || die
	
	nmcli -f 'bssid,signal,ssid' --color yes device wifi |
	  fzf \
	  --with-nth=2.. \
	  --ansi \
	  --height=40% \
	  --reverse \
	  --cycle \
	  --inline-info \
	  --header-lines=1 \
	  --bind="enter:execute:nmcli -a device wifi connect {1}"
}
